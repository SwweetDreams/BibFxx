package pe.edu.upeu.biblfx.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import pe.edu.upeu.biblfx.model.*;
import pe.edu.upeu.biblfx.repository.LibroRepository;
import pe.edu.upeu.biblfx.repository.PrestamoRepository;
import pe.edu.upeu.biblfx.repository.UsuarioRepository;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

@Service
public class DataInitializer implements CommandLineRunner {

    @Autowired
    private UsuarioRepository usuarioRepository;

    @Autowired
    private LibroRepository libroRepository;

    @Autowired
    private PrestamoRepository prestamoRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Override
    public void run(String... args) throws Exception {
        // Solo inicializar si no hay usuarios en la base de datos
        if (usuarioRepository.count() == 0) {
            System.out.println("üöÄ Inicializando base de datos con datos de prueba...");
            initializeUsers();
            initializeBooks();
            initializeLoans();
            System.out.println("‚úÖ Base de datos inicializada exitosamente!");
        } else {
            System.out.println("‚úÖ Base de datos ya contiene datos existentes.");
        }
    }

    private void initializeUsers() {
        String encodedPassword = passwordEncoder.encode("password123");
        
        List<Usuario> usuarios = Arrays.asList(
            new Usuario("admin", encodedPassword, "Administrador del Sistema", "admin@biblioteca.com"),
            new Usuario("bibliotecario1", encodedPassword, "Mar√≠a Gonz√°lez", "maria@biblioteca.com"),
            new Usuario("bibliotecario2", encodedPassword, "Carlos Rodr√≠guez", "carlos@biblioteca.com"),
            new Usuario("lector1", encodedPassword, "Ana Mart√≠nez", "ana@email.com"),
            new Usuario("lector2", encodedPassword, "Luis P√©rez", "luis@email.com"),
            new Usuario("lector3", encodedPassword, "Carmen L√≥pez", "carmen@email.com"),
            new Usuario("lector4", encodedPassword, "Roberto Silva", "roberto@email.com"),
            new Usuario("lector5", encodedPassword, "Patricia Ruiz", "patricia@email.com")
        );

        // Asignar roles
        usuarios.get(0).setRol(RolUsuario.ADMINISTRADOR);
        usuarios.get(1).setRol(RolUsuario.BIBLIOTECARIO);
        usuarios.get(2).setRol(RolUsuario.BIBLIOTECARIO);
        usuarios.get(3).setRol(RolUsuario.LECTOR);
        usuarios.get(4).setRol(RolUsuario.LECTOR);
        usuarios.get(5).setRol(RolUsuario.LECTOR);
        usuarios.get(6).setRol(RolUsuario.LECTOR);
        usuarios.get(7).setRol(RolUsuario.LECTOR);

        usuarioRepository.saveAll(usuarios);
        System.out.println("üë• " + usuarios.size() + " usuarios de prueba creados");
    }

    private void initializeBooks() {
        List<Libro> libros = Arrays.asList(
            // Literatura Cl√°sica
            new Libro("El Quijote", "Miguel de Cervantes", "978-84-376-0494-7"),
            new Libro("La Celestina", "Fernando de Rojas", "978-84-376-0494-9"),
            new Libro("Don Juan Tenorio", "Jos√© Zorrilla", "978-84-376-0494-8"),
            new Libro("Los miserables", "Victor Hugo", "978-84-376-0495-0"),
            new Libro("Madame Bovary", "Gustave Flaubert", "978-84-376-0495-1"),
            new Libro("El retrato de Dorian Gray", "Oscar Wilde", "978-84-376-0495-2"),
            new Libro("Orgullo y prejuicio", "Jane Austen", "978-84-376-0495-3"),
            new Libro("Crimen y castigo", "Fi√≥dor Dostoyevski", "978-84-376-0495-4"),
            
            // Literatura Contempor√°nea
            new Libro("Cien a√±os de soledad", "Gabriel Garc√≠a M√°rquez", "978-84-397-2077-5"),
            new Libro("Pedro P√°ramo", "Juan Rulfo", "978-84-397-2077-6"),
            new Libro("El Aleph", "Jorge Luis Borges", "978-84-397-2077-7"),
            new Libro("Rayuela", "Julio Cort√°zar", "978-84-397-2077-8"),
            new Libro("1984", "George Orwell", "978-84-376-0495-5"),
            new Libro("Fahrenheit 451", "Ray Bradbury", "978-84-376-0495-6"),
            
            // Ficci√≥n y Fantas√≠a
            new Libro("El se√±or de los anillos", "J.R.R. Tolkien", "978-84-397-2077-9"),
            new Libro("Harry Potter y la piedra filosofal", "J.K. Rowling", "978-84-397-2078-0"),
            new Libro("El hobbit", "J.R.R. Tolkien", "978-84-397-2078-5"),
            new Libro("El c√≥digo Da Vinci", "Dan Brown", "978-84-397-2078-1"),
            new Libro("Los pilares de la tierra", "Ken Follett", "978-84-397-2078-2"),
            new Libro("El nombre del viento", "Patrick Rothfuss", "978-84-397-2078-3"),
            
            // Ciencia Ficci√≥n
            new Libro("Dune", "Frank Herbert", "978-84-397-2078-4"),
            
            // Historia y Filosof√≠a
            new Libro("Los pilares de la tierra", "Ken Follett", "978-84-397-2078-6"),
            new Libro("El arte de la guerra", "Sun Tzu", "978-84-376-0495-8"),
            new Libro("Filosof√≠a para principiantes", "Rius", "978-84-397-2078-7"),
            
            // Arte y Cultura
            new Libro("Historia del arte", "Ernst Gombrich", "978-84-376-0495-7"),
            
            // Cocina
            new Libro("Cocina peruana", "Gast√≥n Acurio", "978-84-397-2078-8"),
            new Libro("El arte de la cocina francesa", "Julia Child", "978-84-397-2078-9"),
            new Libro("Cocina mediterr√°nea", "Jamie Oliver", "978-84-397-2079-0")
        );

        // Configurar detalles de los libros
        configureBookDetails(libros);

        libroRepository.saveAll(libros);
        System.out.println("üìö " + libros.size() + " libros de prueba creados");
    }

    private void configureBookDetails(List<Libro> libros) {
        // Literatura Cl√°sica
        configureBook(libros.get(0), "C√°tedra", 1605, CategoriaLibro.LITERATURA, 5, 5, "Obra maestra de la literatura espa√±ola");
        configureBook(libros.get(1), "C√°tedra", 1499, CategoriaLibro.LITERATURA, 2, 2, "Tragicomedia de Calisto y Melibea");
        configureBook(libros.get(2), "C√°tedra", 1844, CategoriaLibro.LITERATURA, 4, 4, "Drama rom√°ntico espa√±ol");
        configureBook(libros.get(3), "C√°tedra", 1862, CategoriaLibro.LITERATURA, 3, 3, "Novela hist√≥rica francesa");
        configureBook(libros.get(4), "C√°tedra", 1857, CategoriaLibro.LITERATURA, 2, 2, "Novela realista francesa");
        configureBook(libros.get(5), "C√°tedra", 1890, CategoriaLibro.LITERATURA, 3, 3, "Novela g√≥tica brit√°nica");
        configureBook(libros.get(6), "C√°tedra", 1813, CategoriaLibro.LITERATURA, 4, 4, "Novela rom√°ntica brit√°nica");
        configureBook(libros.get(7), "C√°tedra", 1866, CategoriaLibro.LITERATURA, 2, 2, "Novela psicol√≥gica rusa");

        // Literatura Contempor√°nea
        configureBook(libros.get(8), "Alfaguara", 1967, CategoriaLibro.LITERATURA, 3, 3, "Novela del realismo m√°gico");
        configureBook(libros.get(9), "Alfaguara", 1955, CategoriaLibro.LITERATURA, 3, 3, "Novela mexicana del siglo XX");
        configureBook(libros.get(10), "Alfaguara", 1949, CategoriaLibro.LITERATURA, 4, 4, "Colecci√≥n de cuentos fant√°sticos");
        configureBook(libros.get(11), "Alfaguara", 1963, CategoriaLibro.LITERATURA, 2, 2, "Novela experimental argentina");
        configureBook(libros.get(12), "C√°tedra", 1949, CategoriaLibro.LITERATURA, 4, 4, "Novela dist√≥pica");
        configureBook(libros.get(13), "C√°tedra", 1953, CategoriaLibro.LITERATURA, 3, 3, "Novela dist√≥pica sobre la censura");

        // Ficci√≥n y Fantas√≠a
        configureBook(libros.get(14), "Minotauro", 1954, CategoriaLibro.GENERAL, 5, 5, "Trilog√≠a √©pica de fantas√≠a");
        configureBook(libros.get(15), "Salamandra", 1997, CategoriaLibro.GENERAL, 6, 6, "Primera novela de la saga de Harry Potter");
        configureBook(libros.get(16), "Minotauro", 1937, CategoriaLibro.GENERAL, 4, 4, "Precuela de El se√±or de los anillos");
        configureBook(libros.get(17), "Umbriel", 2003, CategoriaLibro.GENERAL, 4, 4, "Thriller de misterio");
        configureBook(libros.get(18), "Plaza & Jan√©s", 1989, CategoriaLibro.HISTORIA, 3, 3, "Novela hist√≥rica medieval");
        configureBook(libros.get(19), "Plaza & Jan√©s", 2007, CategoriaLibro.GENERAL, 2, 2, "Primera parte de la Cr√≥nica del asesino de reyes");

        // Ciencia Ficci√≥n
        configureBook(libros.get(20), "Plaza & Jan√©s", 1965, CategoriaLibro.CIENCIA, 3, 3, "Cl√°sico de la ciencia ficci√≥n");

        // Historia y Filosof√≠a
        configureBook(libros.get(21), "Plaza & Jan√©s", 1989, CategoriaLibro.HISTORIA, 3, 3, "Novela hist√≥rica medieval");
        configureBook(libros.get(22), "C√°tedra", -500, CategoriaLibro.HISTORIA, 4, 4, "Tratado militar chino cl√°sico");
        configureBook(libros.get(23), "DeBolsillo", 1985, CategoriaLibro.FILOSOFIA, 3, 3, "Introducci√≥n amena a la filosof√≠a");

        // Arte y Cultura
        configureBook(libros.get(24), "C√°tedra", 1950, CategoriaLibro.ARTE, 2, 2, "Compendio de la historia del arte occidental");

        // Cocina
        configureBook(libros.get(25), "Planeta", 2010, CategoriaLibro.COCINA, 3, 3, "Recetas de la gastronom√≠a peruana");
        configureBook(libros.get(26), "Debolsillo", 1961, CategoriaLibro.COCINA, 2, 2, "Cl√°sico de la cocina francesa");
        configureBook(libros.get(27), "Debolsillo", 2005, CategoriaLibro.COCINA, 3, 3, "Recetas mediterr√°neas saludables");
    }

    private void configureBook(Libro libro, String editorial, int anio, CategoriaLibro categoria, int total, int disponible, String descripcion) {
        libro.setEditorial(editorial);
        libro.setAnioPublicacion(anio);
        libro.setCategoria(categoria);
        libro.setCantidadTotal(total);
        libro.setCantidadDisponible(disponible);
        libro.setDescripcion(descripcion);
    }

    private void initializeLoans() {
        // Obtener usuarios y libros para crear pr√©stamos
        Usuario lector1 = usuarioRepository.findByUsername("lector1").orElse(null);
        Usuario lector2 = usuarioRepository.findByUsername("lector2").orElse(null);
        Usuario lector3 = usuarioRepository.findByUsername("lector3").orElse(null);
        Usuario lector4 = usuarioRepository.findByUsername("lector4").orElse(null);
        Usuario lector5 = usuarioRepository.findByUsername("lector5").orElse(null);

        List<Libro> libros = libroRepository.findAll();
        if (libros.isEmpty()) return;

        List<Prestamo> prestamos = Arrays.asList(
            // Pr√©stamos activos
            new Prestamo(lector1, libros.get(0), LocalDateTime.now().plusDays(7)),
            new Prestamo(lector2, libros.get(8), LocalDateTime.now().plusDays(14)),
            new Prestamo(lector3, libros.get(14), LocalDateTime.now().plusDays(10)),
            new Prestamo(lector4, libros.get(15), LocalDateTime.now().plusDays(5)),
            
            // Pr√©stamos devueltos
            new Prestamo(lector1, libros.get(1), LocalDateTime.now().minusDays(2)),
            new Prestamo(lector2, libros.get(9), LocalDateTime.now().minusDays(5)),
            new Prestamo(lector3, libros.get(16), LocalDateTime.now().minusDays(8)),
            
            // Pr√©stamos vencidos
            new Prestamo(lector4, libros.get(2), LocalDateTime.now().minusDays(3)),
            new Prestamo(lector5, libros.get(10), LocalDateTime.now().minusDays(1))
        );

        // Configurar estados y detalles de los pr√©stamos
        configureLoanDetails(prestamos);

        prestamoRepository.saveAll(prestamos);
        System.out.println("üìñ " + prestamos.size() + " pr√©stamos de prueba creados");
    }

    private void configureLoanDetails(List<Prestamo> prestamos) {
        // Pr√©stamos activos
        prestamos.get(0).setObservaciones("Pr√©stamo para investigaci√≥n acad√©mica");
        prestamos.get(1).setObservaciones("Lectura personal");
        prestamos.get(2).setObservaciones("Pr√©stamo para proyecto escolar");
        prestamos.get(3).setObservaciones("Lectura recreativa");

        // Pr√©stamos devueltos
        prestamos.get(4).setEstado(EstadoPrestamo.DEVUELTO);
        prestamos.get(4).setFechaDevolucionReal(LocalDateTime.now().minusDays(1));
        prestamos.get(4).setObservaciones("Devoluci√≥n a tiempo");

        prestamos.get(5).setEstado(EstadoPrestamo.DEVUELTO);
        prestamos.get(5).setFechaDevolucionReal(LocalDateTime.now().minusDays(2));
        prestamos.get(5).setObservaciones("Devoluci√≥n tard√≠a");

        prestamos.get(6).setEstado(EstadoPrestamo.DEVUELTO);
        prestamos.get(6).setFechaDevolucionReal(LocalDateTime.now().minusDays(3));
        prestamos.get(6).setObservaciones("Devoluci√≥n a tiempo");

        // Pr√©stamos vencidos
        prestamos.get(7).setObservaciones("Pr√©stamo vencido - pendiente de devoluci√≥n");
        prestamos.get(8).setObservaciones("Pr√©stamo vencido - pendiente de devoluci√≥n");
    }
} 